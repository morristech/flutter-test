// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
import 'dart:async';
import 'package:flutter/services.dart';

class Uint8List {
  int bytesPerElement;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['bytesPerElement'] = bytesPerElement;
    return pigeonMap;
  }
  // ignore: unused_element
  static Uint8List _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final Uint8List result = Uint8List();
    result.bytesPerElement = pigeonMap['bytesPerElement'];
    return result;
  }
}

class String {
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    return pigeonMap;
  }
  // ignore: unused_element
  static String _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final String result = String();
    return result;
  }
}

class HostImageApi {
  Future<Uint8List> getSystemImageData(String arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.HostImageApi.getSystemImageData', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return Uint8List._fromMap(replyMap['result']);
    }
    
  }
}

